import pt.up.fe.comp.jmm.JmmNode;
import java.util.ArrayList;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 6.1 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node, JmmNode {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Parser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() {
    return ParserTreeConstants.jjtNodeName[id];
  }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  public int getId() {
    return id;
  }

  public String getKind()
  {
    return toString();
  }

  /**
     * Inserts a node at the given position
     * 
     * @param child
     * @param index
     */
    public void add(JmmNode child, int index)
    {

    }

    /**
     * @return the names of the attributes supported by this Node kind
     */
    public List<String> getAttributes()
    {
      return new ArrayList<String>();
    }

    /**
     * Sets the value of an attribute.
     * 
     * @param attribute
     * @param value
     */
    public void put(String attribute, String value)
    {

    }

    /**
     * 
     * @param attribute
     * @returns the value of an attribute. To see all the attributes iterate the list provided by
     *          {@link JmmNode#getAttributes()}
     */
    public String get(String attribute)
    {
      return "";
    }

    /**
     * 
     * @return the children of the node or an empty list if there are no children
     * 
     */
    public List<JmmNode> getChildren()
    {
      return JmmNode.convertChildren(children);
    }

    /**
     * 
     * @return the number of children of the node
     */
    public int getNumChildren()
    {
      return 0;
    }


}

/* JavaCC - OriginalChecksum=b7271bdfed7941c0eeb8e589d690a9d6 (do not edit this line) */
