PARSER_BEGIN(jmm)

import java.security.PublicKey;public class jmm
{
    public static void main(String args[]) throws ParseException
    {
        jmm parser = new jmm(System.in);
        jmm.Program();
    }
}

PARSER_END(jmm)

SKIP:
{
    " " | "\n"
}

TOKEN:
{
    < INTEGERLITERAL : (["0"-"9"])+ >
    | < IF : "if">
    | < INT : "int">
    | < NEW : "new">
    | < VOID : "void">
    | < ELSE : "else">
    | < TRUE : "true">
    | < MAIN : "main">
    | < THIS : "this">
    | < WHILE : "while">
    | < FALSE : "false">
    | < CLASS : "class">
    | < PUBLIC : "public">
    | < STATIC : "static">
    | < STRING : "String">
    | < LENGTH : "length">
    | < RETURN : "return">
    | < IMPORT : "import">
    | < BOOLEAN : "boolean">
    | < EXTENDS : "extends">
    | < IDENTIFIER : (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* >
}

void Program() : {}
{
    ImportDeclaration() ClassDeclaration() <EOF>
}

void ImportDeclaration() :{}
{
    (<IMPORT> <IDENTIFIER> ("." <IDENTIFIER>)* ";")*
}

void ClassDeclaration() :{}
{
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? "{" (VarDeclaration())* (MethodDeclaration())* "}"
}

void VarDeclaration() : {}
{
    Type() <IDENTIFIER> ";"
}

void MethodDeclaration() : {}
{
    <PUBLIC> (Type() <IDENTIFIER> "(" (Type() <IDENTIFIER> ("," Type() <IDENTIFIER> )* )? ")" "{" (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RETURN> Expression() ";" "}"
    | <STATIC> <VOID> <MAIN> "(" <STRING> "[" "]" <IDENTIFIER>  ")" "{" (LOOKAHEAD(2) VarDeclaration())* (Statement())* "}" )
}

void Type() : {}
{
    <INT> ("[" "]")?
    | <BOOLEAN>
    | <IDENTIFIER>
}

void Statement() : {}
{
    "{" (Statement() )* "}"
    | <IF> "(" Expression() ")" Statement() <ELSE> Statement()
    | <WHILE> "(" Expression() ")" Statement()
    | Expression3() ";"
    | <IDENTIFIER> (
        "=" Expression() ";"
            | "[" Expression() "]" ("=" Expression() ";" | ExpressionLFRFix())
            | ExpressionLFRFix2() ";" )
}

void Expression() : {}
{
     <INTEGERLITERAL> ExpressionLFRFix()
    | <TRUE> ExpressionLFRFix()
    | <FALSE> ExpressionLFRFix()
    | <IDENTIFIER> ExpressionLFRFix()
    | <THIS> ExpressionLFRFix()
    | <NEW> (<INT> "[" Expression() "]" | <IDENTIFIER> "(" ")" ) ExpressionLFRFix()
    | "!" Expression() ExpressionLFRFix()
    | "(" Expression()  ")" ExpressionLFRFix()
}

void Expression3() : {}
{
     <INTEGERLITERAL> ExpressionLFRFix()
    | <TRUE> ExpressionLFRFix()
    | <FALSE> ExpressionLFRFix()
    | <THIS> ExpressionLFRFix()
    | <NEW> (<INT> "[" Expression() "]" | <IDENTIFIER> "(" ")" ) ExpressionLFRFix()
    | "!" Expression() ExpressionLFRFix()
    | "(" Expression()  ")" ExpressionLFRFix()
}

void ExpressionLFRFix() : {}
{
    (LOOKAHEAD(2) (( "&&" | "<" | "+" | "-" | "*" | "/"  ) Expression() ExpressionLFRFix()
    | "[" Expression() "]" ExpressionLFRFix()
    | "." ( <IDENTIFIER> "(" (Expression() ( "," Expression())*)? ")" ExpressionLFRFix()  | <LENGTH> ExpressionLFRFix())  ))?
}

void ExpressionLFRFix2() : {}
{
    (( "&&" | "<" | "+" | "-" | "*" | "/"  ) Expression() ExpressionLFRFix()
    | "." ( <IDENTIFIER> "(" (Expression() ( "," Expression())*)? ")" ExpressionLFRFix()  | <LENGTH> ExpressionLFRFix()  ))?
}