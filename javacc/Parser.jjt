PARSER_BEGIN(Parser)

public class Parser
{
    public static int errorLimit = 10;
    public static int errorCounter = 0;
}

PARSER_END(Parser)

SKIP:
{
    " " | "\n" | "\t" | "\r"
}

TOKEN:
{
    < INTEGERLITERAL : (["0"-"9"])+ >
    | < IF : "if">
    | < INT : "int">
    | < NEW : "new">
    | < VOID : "void">
    | < ELSE : "else">
    | < TRUE : "true">
    | < MAIN : "main">
    | < THIS : "this">
    | < WHILE : "while">
    | < FALSE : "false">
    | < CLASS : "class">
    | < PUBLIC : "public">
    | < STATIC : "static">
    | < STRING : "String">
    | < LENGTH : "length">
    | < RETURN : "return">
    | < IMPORT : "import">
    | < BOOLEAN : "boolean">
    | < EXTENDS : "extends">
    | < OPENPAR : "(">
    | < CLOSEPAR : ")">
    | < SEMICOLON : ";">
    | < OPENCUR : "{">
    | < IDENTIFIER : (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* >
}

JAVACODE
void error_skipto(String description) #void {
    ParseException e = generateParseException();  // generate the exception object
    Token t;

    t = getToken(1);
    System.out.println("Unexpected \"" + t.image + "\" in " + description + " at line " + t.beginLine + "!");

    while(t.kind != SEMICOLON && t.kind != EOF && t.kind != OPENCUR && t.kind != CLOSEPAR)
    {
        t = getNextToken();
        t = getToken(1);
    }

}

SimpleNode Program() : {}
{
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}

void ImportDeclaration() : {}
{
    (<IMPORT> <IDENTIFIER> ("." <IDENTIFIER>)* #ImportMaterial <SEMICOLON>)*
}

void ClassDeclaration() : {Token t;}
{
    <CLASS> (t=<IDENTIFIER> {jjtThis.val = t.image;} #ClassName) (<EXTENDS> <IDENTIFIER>)? <OPENCUR> (VarDeclaration())* (MethodDeclaration())* "}"
}

void VarDeclaration() : {}
{
    Type() <IDENTIFIER> #VarName <SEMICOLON>
}

void MethodDeclaration() #void : {}
{
    <PUBLIC> (NormalMethodDeclaration() | MainMethodDeclaration())
}

void NormalMethodDeclaration() : {}
{
    (Type() #ReturnType) <IDENTIFIER> #MethodName <OPENPAR> (MethodDeclarationArgs())? <CLOSEPAR> <OPENCUR> (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RETURN> Expression() #ReturnValue <SEMICOLON> "}"
}

void MainMethodDeclaration() : {}
{
    <STATIC> <VOID> <MAIN> <OPENPAR> <STRING> "[" "]" <IDENTIFIER>  <CLOSEPAR> <OPENCUR> (LOOKAHEAD(2) VarDeclaration())* (Statement())* "}" 
}

void MethodDeclarationArgs() : {}
{
    (Type() (<IDENTIFIER> #ParameterName) #Parameter(2)) ("," (Type() (<IDENTIFIER> #ParameterName) #Parameter(2)) )* 
}

void Type() : {Token t1;}
{
    <INT> {jjtThis.val = "int";} ("[" "]" {jjtThis.val += "[]";})?
    | <BOOLEAN> {jjtThis.val = "boolean";}
    | t1=<IDENTIFIER> {jjtThis.val = t1.image;}
}

void Body() : {}
{
    Statement()
}

void Statement() #void : {} 
{
    <OPENCUR> (Statement() )* "}"
    | <IF> <OPENPAR> Expression() <CLOSEPAR> Body()  #If(2) <ELSE> Statement() #Else
    | <WHILE> <OPENPAR> 
   try 
   {
        Expression()
   }
   catch(ParseException e)
   {
       error_skipto("while expression");
       errorCounter++;
       if (errorCounter == errorLimit) throw e;   
   } <CLOSEPAR> Body() #While(2)
    | Expression3() <SEMICOLON>
    | Identifier() (
        "=" Assignee() #Assign(2) 
            | "[" Expression() #ArrayIndex "]" ("=" Expression() #ArrayAssign(3) <SEMICOLON> | ExpressionLFRFix())
            | ExpressionLFRFix2() <SEMICOLON> )
}

void Identifier() : {}
{
    <IDENTIFIER>
}

void Assignee() #void : {}
{
    Expression() <SEMICOLON>
}

void Expression() #void : {}
{
    <INTEGERLITERAL> #IntegerLiteral ExpressionLFRFix()
    | <TRUE> #True ExpressionLFRFix()
    | <FALSE> #False ExpressionLFRFix()
    | <IDENTIFIER> #VariableName ExpressionLFRFix()
    | <THIS> #This ExpressionLFRFix()
    | <NEW> (ArrayInitializer() | ConstructorCall()) ExpressionLFRFix()
    | "!" Expression() #Negation ExpressionLFRFix()
    | <OPENPAR> Expression() <CLOSEPAR> ExpressionLFRFix()
}

void Expression3() #void : {}
{
    <INTEGERLITERAL> #IntegerLiteral ExpressionLFRFix()
    | <TRUE> #True ExpressionLFRFix()
    | <FALSE> #False ExpressionLFRFix()
    | <THIS> #This ExpressionLFRFix()
    | <NEW> (ArrayInitializer() | ConstructorCall()) #New ExpressionLFRFix()
    | "!" Expression() #Negation ExpressionLFRFix()
    | <OPENPAR> Expression() <CLOSEPAR> ExpressionLFRFix() 
}

void ArrayInitializer() : {}
{
    <INT> "[" Expression() "]"
}

void ConstructorCall() : {}
{
    Identifier() <OPENPAR> <CLOSEPAR>
}

void ExpressionLFRFix() #void : {}
{
    (LOOKAHEAD(2) (Operation() ExpressionLFRFix()
    | "[" Expression() "]" ExpressionLFRFix()
    | "." ( MethodCall() | AttributeCall() ExpressionLFRFix())  ))?
}

void ExpressionLFRFix2() #void : {}
{
    (Operation() ExpressionLFRFix()
    | "." ( MethodCall() | <LENGTH> #Length ExpressionLFRFix()  ))?
}

void MethodCall() #void : {}
{
    <IDENTIFIER> #MethodName <OPENPAR> (MethodCallArgs())? <CLOSEPAR> ExpressionLFRFix() #MethodCall(3)
}

void AttributeCall() #void : {}
{
    <LENGTH> #AttributeCall(1)
}

void MethodCallArgs() : {}
{
    Expression() ( "," Expression())*
}

void Operation() #void : {}
{
    "&&" Expression() #And(2)
    | "<" Expression() #SmallerThan(2)
    | "+" Expression() #Addition(2)
    | "-" Expression() #Subtraction(2)
    | "*" Expression() #Multiplication(2)
    | "/" Expression() #Division(2)
}
