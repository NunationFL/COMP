OLLIR CODE:
Fac {
.construct Fac().V {
invokespecial(this, "<init>").V;
}
.method public whileTest().i32 {
num.i32 :=.i32 0.i32;
if (num.i32 <.i32 5.i32) goto whilebody1;
goto endwhile1;
whilebody1:
t0.i32 :=.i32 num.i32 +.i32 1.i32;
num.i32 :=.i32 t0.i32;
if ( num.i32 <.i32 5.i32) goto whilebody1;
endwhile1:
ret.i32 num.i32;
}
.method public static main(args.array.String).V {
t0.i32 :=.i32 arraylength($0.args.i32).i32;
a.i32 :=.i32 t0.i32;
t1.Fac :=.Fac new(Fac).Fac;
invokespecial(t1.Fac, "<init>").V;
t2.i32 :=.i32 invokevirtual(t1.Fac , "compFac", 10.i32).i32;
invokestatic(io, "println", t2.i32).V;
}
.method public compFac(num.i32).i32 {
if ($1.num.i32 <.i32 1.i32) goto ifbody1;
goto elsebody1;
ifbody1:
num_aux.i32 :=.i32 1.i32;
goto endifbody1;
elsebody1:
t0.Fac :=.Fac $0.this.Fac;
t1.i32 :=.i32 $1.num.i32 -.i32 1.i32;
t2.i32 :=.i32 invokevirtual(t0.Fac, "compFac", t1.i32).i32;
t3.i32 :=.i32 $1.num.i32 *.i32 t2.i32;
num_aux.i32 :=.i32 t3.i32;
endifbody1:
ret.i32 num_aux.i32;
}
}

