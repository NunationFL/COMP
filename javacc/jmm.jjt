PARSER_BEGIN(jmm)

import java.security.PublicKey;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class jmm
{
    public static int errorLimit = 10;
    public static int errorCounter = 0;

    public static void main(String args[]) throws ParseException, FileNotFoundException
    {
        jmm parser = new jmm(new FileInputStream(args[0]));

        SimpleNode root = jmm.Program();

        root.dump("");
    }
}

PARSER_END(jmm)

SKIP:
{
    " " | "\n" | "\t" | "\r"
}

TOKEN:
{
    < INTEGERLITERAL : (["0"-"9"])+ >
    | < IF : "if">
    | < INT : "int">
    | < NEW : "new">
    | < VOID : "void">
    | < ELSE : "else">
    | < TRUE : "true">
    | < MAIN : "main">
    | < THIS : "this">
    | < WHILE : "while">
    | < FALSE : "false">
    | < CLASS : "class">
    | < PUBLIC : "public">
    | < STATIC : "static">
    | < STRING : "String">
    | < LENGTH : "length">
    | < RETURN : "return">
    | < IMPORT : "import">
    | < BOOLEAN : "boolean">
    | < EXTENDS : "extends">
    | < OPENPAR : "(">
    | < CLOSEPAR : ")">
    | < SEMICOLON : ";">
    | < OPENCUR : "{">
    | < IDENTIFIER : (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* >
}

JAVACODE
void error_skipto(String description) {
    ParseException e = generateParseException();  // generate the exception object
    Token t;

    t = getNextToken();
    System.out.println("Unexpected \"" + t.image + "\" in " + description + " at line " + t.beginLine + "!");

    while(t.kind != SEMICOLON && t.kind != EOF && t.kind != OPENCUR && t.kind != CLOSEPAR)
    {
        t = getNextToken();
    }

}

SimpleNode Program() : {}
{
    ImportDeclaration() ClassDeclaration() <EOF> {return jjtThis;}
}

void ImportDeclaration() :{}
{
    (<IMPORT> <IDENTIFIER> ("." <IDENTIFIER>)* <SEMICOLON>)*
}

void ClassDeclaration() :{}
{
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? <OPENCUR> (VarDeclaration())* (MethodDeclaration())* "}"
}

void VarDeclaration() : {}
{
    Type() <IDENTIFIER> <SEMICOLON>
}

void MethodDeclaration() : {}
{
    <PUBLIC> (Type() <IDENTIFIER> <OPENPAR> (Type() <IDENTIFIER> ("," Type() <IDENTIFIER> )* )? <CLOSEPAR> <OPENCUR> (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RETURN> Expression() <SEMICOLON> "}"
    | <STATIC> <VOID> <MAIN> <OPENPAR> <STRING> "[" "]" <IDENTIFIER>  <CLOSEPAR> <OPENCUR> (LOOKAHEAD(2) VarDeclaration())* (Statement())* "}" )
}

void Type() : {Token t;}
{
    <INT> ("[" "]")?
    | <BOOLEAN>
    | <IDENTIFIER>
}

void Statement() : {} 
{
    <OPENCUR> (Statement() )* "}"
    | <IF> <OPENPAR> Expression() <CLOSEPAR> Statement() <ELSE> Statement()
    | <WHILE> <OPENPAR> 
   try 
   {
        Expression() <CLOSEPAR>
   }
   catch(ParseException e)
   {
       error_skipto("while expression");
       errorCounter++;
       if (errorCounter == errorLimit) throw e;   
   }  Statement()
    | Expression3() <SEMICOLON>
    | <IDENTIFIER> (
        "=" Expression() <SEMICOLON>
            | "[" Expression() "]" ("=" Expression() <SEMICOLON> | ExpressionLFRFix())
            | ExpressionLFRFix2() <SEMICOLON> )
}

void Expression() : {}
{
     <INTEGERLITERAL> ExpressionLFRFix()
    | <TRUE> ExpressionLFRFix()
    | <FALSE> ExpressionLFRFix()
    | <IDENTIFIER> ExpressionLFRFix()
    | <THIS> ExpressionLFRFix()
    | <NEW> (<INT> "[" Expression() "]" | <IDENTIFIER> <OPENPAR> <CLOSEPAR> ) ExpressionLFRFix()
    | "!" Expression() ExpressionLFRFix()
    | <OPENPAR> Expression()  <CLOSEPAR> ExpressionLFRFix()
}

void Expression3() : {}
{
     <INTEGERLITERAL> ExpressionLFRFix()
    | <TRUE> ExpressionLFRFix()
    | <FALSE> ExpressionLFRFix()
    | <THIS> ExpressionLFRFix()
    | <NEW> (<INT> "[" Expression() "]" | <IDENTIFIER> <OPENPAR> <CLOSEPAR> ) ExpressionLFRFix()
    | "!" Expression() ExpressionLFRFix()
    | <OPENPAR> Expression()  <CLOSEPAR> ExpressionLFRFix()
}

void ExpressionLFRFix() : {}
{
    (LOOKAHEAD(2) (( "&&" | "<" | "+" | "-" | "*" | "/"  ) Expression() ExpressionLFRFix()
    | "[" Expression() "]" ExpressionLFRFix()
    | "." ( <IDENTIFIER> <OPENPAR> (Expression() ( "," Expression())*)? <CLOSEPAR> ExpressionLFRFix()  | <LENGTH> ExpressionLFRFix())  ))?
}

void ExpressionLFRFix2() : {}
{
    (( "&&" | "<" | "+" | "-" | "*" | "/"  ) Expression() ExpressionLFRFix()
    | "." ( <IDENTIFIER> <OPENPAR> (Expression() ( "," Expression())*)? <CLOSEPAR> ExpressionLFRFix()  | <LENGTH> ExpressionLFRFix()  ))?
}